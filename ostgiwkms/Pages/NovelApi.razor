@page "/Generate-Novel-Stream"
@inject ostgiwkms.Services.TextGenerationRequest GenerationRequest
@inject ostgiwkms.Services.AuthService AuthService
@inject ostgiwkms.Services.SettingsService sService

<head>
    <meta charset="utf-8" />
    <title>Novel Generator</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/app.css" />
</head>
<body class="novelaiBody">
    <div class="novelai">
        <p>Temperature from settings: @temperatureValue</p>
        <button id="hideButton">Hide Settings</button>
        
        <script>
            document.getElementById('hideButton').addEventListener('click', function () {
                document.querySelector('.elementToHide').classList.toggle('hide-element');
            });
        </script>


        <div>
            <p>Your prompt: @inputText</p>
            <p>Response: "@generatedStream"</p>
        </div>

        <div style="margin: 100px"></div>

        <div class="textinput">
            <label for="textbox">Enter Prompt:</label>
            <input class="novelaiInput" type="text" @bind="inputText" placeholder="Type something...">
            <button class="generateStream" @onclick="GenerateStream">Generate</button>
        </div>
    </div>
</body>

@code {

    private string generatedStream;
    private string inputText { get; set; }
    private string API_NOVELAI = "https://api.novelai.net/";
    private string API_KEY = "";
    private string placeholder = "oRGZjZE7QO7ltvuvg3iR6YvkKwkikzbLk2vdveunPtJU-qc92h_jZBKGG-bRfVto";
    [Parameter] public double temperatureValue { get; set; }
    [Parameter] public int minLength { get; set; }
    [Parameter] public int maxLength { get; set; }

    private async Task AuthenticateAndLog()
    {
        try
        {
            // Replace "your_api_key" with your actual API key
            await AuthService.AuthenticateAsync(API_KEY);
            Console.WriteLine("Authentication successful");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error during authentication: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        (temperatureValue, minLength, maxLength) = sService.GetSettingsInputs();
    }

    private async Task GenerateStream()
    {
        generatedStream = await GenerationRequest.GenerateNovelStream(inputText, temperatureValue, minLength, maxLength);
    }
}
